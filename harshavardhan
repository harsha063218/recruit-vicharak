/*
PROJECT: High-Speed File Download to SPIFFS on ESP32
Author : K Harshavardhan
Objective: Download a file via HTTPS and save it to SPIFFS while showing download progress and speed.
*/

// --------------Header Files----------------
#include<WiFi.h>            // WiFi Library for connecting ESP32 to WiFi
#include<HTTPClient.h>      //HTTP Client library to handle HTTP/HTTPS requests
#include<WiFiClientSecure.h>//WiFiclientSecure to handle HTTPS connections
#include<FS.h>
#include<SPIFFS.h>          // SPIFFS library for filesystem on ESP32 flash.

// ---------------User Configurations-----------

const char* ssid="Airtel_Sri Srinivasa pg 1st flr";
const char* password="AVR994529";
String urlLists[]={
  "https://speed.hetzner.de/100MB.bin",// large test files
  "https://speed.hetzner.de/10MB.bin",  // Large test file
 "https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json", // Smaller test file
 "https://www.example.com/index.html" // Generic fallback
};
const int urlCount=sizeof(urlLists)/sizeof(urlLists[0]);
const char* spiffsPath="/download.bin";

#define BufferSize 16384 //16KB Buffer

// ----------------setup Function----------------

void setup()
{
  Serial.begin(115200);  //set baud rate to 115200
  delay(1000);
  //connect to WiFi
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid,password);
  Serial.print("Connecting WiFi....");
  while(WiFi.status()!=WL_CONNECTED)
  {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nWiFi Connected! IP:"+WiFi.localIP().toString());
  if(!SPIFFS.begin(true)) // Initialize SPIFFS
  {
    Serial.println("SPIFFS mount failed!");
    while(1); //stop execution
  }

  bool success=false;
  for(int i=0;i<urlCount;i++)
  {
    Serial.println("Trying URL: "+urlLists[i]);
    if(downloadToSPIFFS(urlLists[i],spiffsPath))
    {
      success=true;  //If it is successfully downloads, stop trying other urls.
      break;
    }
  }
  if(!success)
  {
    Serial.println("All doenload attempts failed.");
  }
}

void loop(){} // Nothing here, as we only download once in setup

bool downloadToSPIFFS(String url,const char* destPath) // Download a file from the given url and save it to SPIFFS and retuns true if download succeded.
{
  HTTPClient https;     //setup HTTPS Client
  WiFiClientSecure* client = new WiFiClientSecure;
  client->setInsecure();
  Serial.println("Connecting to "+url);
  if(!https.begin(*client,url))
  {
    Serial.println("HTTPS connection failed.");
    return false;
  }

// Add headers to prevent server reject connection

https.addHeader("User-Agent","ESP32-Downloader");
https.addHeader("Accept-Encoding","Identity");

//Send HTTP Get Request

int httpCode=https.GET();
if(httpCode!=HTTP_CODE_OK)
{
  Serial.printf("HTTP GET failed,code=%d\n",httpCode);
  https.end();
  return false;
}
int totalLength=https.getSize();
Serial.printf("Content-Length: %d bytes\n",totalLength);

// Open file on SPIFFS for Writting
File fp=SPIFFS.open(destPath,FILE_WRITE);
if(!fp)
{
  Serial.println("SPIFFS open failed");
  https.end();
  return false;

}

// Allocate RAM buffer for high speed Writes

uint8_t *buffer=(uint8_t*)malloc(BufferSize);
if(!buffer)
{
  Serial.println("Buffer Allocation failed!");
  fp.close();
  https.end();
  return false;
}

//start reading and writing data in chunks

int bytes=0;
unsigned long t0=millis();
WiFiClient* stream = https.getStreamPtr();
Serial.println("Downloading......");
while(https.connected()&&(totalLength>0||totalLength==-1))
{
  size_t len=stream->available();
  if(len)
  {
    if(len>BufferSize)
    {
      len=BufferSize;
    }
    int c=stream->readBytes((char*)buffer,len);
    if(c<=0)
    {
      break;
    }
    fp.write(buffer,c);  // write chunk to SPIFFS
    bytes+=c;            // update total bytes written
    if(totalLength>0)
    {
      totalLength-=c;
    }

    // Live Speed Display
    float sec= (millis()-t0)/1000.0;//seconds Elapsed
    float kbps=(bytes/1024.0)/sec;
    Serial.printf("\rDownloaded : %d bytes\n Speed : %1fKB/s",bytes,kbps);
  }
  yield(); // allow background tasks to run
}
   free(buffer);
   fp.close();
   https.end();

   unsigned long t1=millis();
   float seconds=(t1-t0)/1000.0;
   float kbps=(bytes/1024.0)/seconds;

   Serial.printf("\nDownload Complete! \n Bytes : %d\n Time: %2fs\n Avg Speed: %1fKB/s",bytes,seconds,kbps);

   //Verify File on SPIFFS
   File verify = SPIFFS.open(destPath,FILE_READ);
   Serial.printf("SPIFFS file size: %dbytes\n",verify.size());
   verify.close();
   return (bytes>0);
}

/* I recorded the entire session twice, but unfortunately my screen froze(due to switching between tab from notepad to arduino ide to google chrome and sometimes network also disconnected )both times, so the recordings didn't comeout 
well .That's why I'm showing only the output .I Sincerely apologize for the inconvenience, but i want to assure you that i worked on this myself using some youtube and pdfs as a learning resources.

-------------------------------THANK YOU----------------------- */
